"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[1084],{28793:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=o(85893),r=o(11151);const i={"sidebar position":2},a="Coloring Component",s={id:"system-architecture/coloring-flask",title:"Coloring Component",description:"The Synesthesia Reading App uses a siloed Python flask to tokenize and color document text. This flask is given a coloring request with the text of a document and the Color Profile of a user",source:"@site/docs/system-architecture/coloring-flask.md",sourceDirName:"system-architecture",slug:"/system-architecture/coloring-flask",permalink:"/project-synesthesia-reading-app/docs/system-architecture/coloring-flask",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2024-Spring/project-synesthesia-reading-app/edit/main/documentation/docs/system-architecture/coloring-flask.md",tags:[],version:"current",lastUpdatedBy:"Elijah Bigham",frontMatter:{"sidebar position":2},sidebar:"docsSidebar",previous:{title:"Version Control",permalink:"/project-synesthesia-reading-app/docs/system-architecture/version-control"},next:{title:"Database Management",permalink:"/project-synesthesia-reading-app/docs/system-architecture/database-management"}},c={},l=[{value:"Coloring Process Overview",id:"coloring-process-overview",level:3},{value:"1. Tokenizing the Text",id:"1-tokenizing-the-text",level:4},{value:"2. Separating Monomorphic Components",id:"2-separating-monomorphic-components",level:4},{value:"3. Parse the Color Profile",id:"3-parse-the-color-profile",level:4},{value:"4. Get a List of Unique Text Items",id:"4-get-a-list-of-unique-text-items",level:4},{value:"5. Creating a Color Map",id:"5-creating-a-color-map",level:4},{value:"6. Package to Send Back to Laravel Backend",id:"6-package-to-send-back-to-laravel-backend",level:4},{value:"Sequence Diagram",id:"sequence-diagram",level:3}];function h(e){const t={a:"a",h1:"h1",h3:"h3",h4:"h4",mermaid:"mermaid",p:"p",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"coloring-component",children:"Coloring Component"}),"\n",(0,n.jsx)(t.p,{children:"The Synesthesia Reading App uses a siloed Python flask to tokenize and color document text. This flask is given a coloring request with the text of a document and the Color Profile of a user\nand returns the information necessary to render a colored document."}),"\n",(0,n.jsx)(t.h3,{id:"coloring-process-overview",children:"Coloring Process Overview"}),"\n",(0,n.jsx)(t.h4,{id:"1-tokenizing-the-text",children:"1. Tokenizing the Text"}),"\n",(0,n.jsx)(t.p,{children:"First, the document text is split wherever there are non-letter or -number characters. So, wherever there is\na space or a new line or punctuation, etc. Instead of a string of text, it is now a list with entries of words and individual, non-word characters."}),"\n",(0,n.jsx)(t.h4,{id:"2-separating-monomorphic-components",children:"2. Separating Monomorphic Components"}),"\n",(0,n.jsxs)(t.p,{children:["Then, each word item in the list is split into its component, monomorphemic words\nusing an algorithm based off of ",(0,n.jsx)(t.a,{href:"https://github.com/TimKam/compound-word-splitter",children:"Tim Kam's compound-word-splitter for Python"}),". The program uses\n",(0,n.jsx)(t.a,{href:"https://github.com/matthewreagan/WebstersEnglishDictionary",children:"this JSON of Webster's English Dictionary"})," to determine\nif components are words.\nIf the word splitter\ncan find smaller component words, i.e. the item is a compound word, each component becomes its own item in the list, but\nwith no space item between them."]}),"\n",(0,n.jsx)(t.h4,{id:"3-parse-the-color-profile",children:"3. Parse the Color Profile"}),"\n",(0,n.jsx)(t.p,{children:"From the color profile sent to the flask, the program extracts a grapheme-color map and a exception map.\nThe grapheme-color map has the color value for each letter and number, while the exception map contains the\ncolor values for words that are known exceptions to the coloring rules-- i.e., they are not the color of their initial letter."}),"\n",(0,n.jsx)(t.h4,{id:"4-get-a-list-of-unique-text-items",children:"4. Get a List of Unique Text Items"}),"\n",(0,n.jsx)(t.p,{children:"Next, the program goes throught the list of tokenized text items and creates a list of only unique items.\nThis ensures that it does not waste time determining the color a word multiple times."}),"\n",(0,n.jsx)(t.h4,{id:"5-creating-a-color-map",children:"5. Creating a Color Map"}),"\n",(0,n.jsx)(t.p,{children:"The algorithm creates a map of each unique text component to its color value by going through the unique word list.\nFirst, it checks if a component is in exception map. If so, if assigns it the color found there. If not,\nit takes the first letter of the component and gets the color value from the grapheme-color map.\nEach component-color pair is added to the word-color map."}),"\n",(0,n.jsx)(t.h4,{id:"6-package-to-send-back-to-laravel-backend",children:"6. Package to Send Back to Laravel Backend"}),"\n",(0,n.jsx)(t.p,{children:"The flask program creates an object with 2 components: the tokenized text and the word-color map. Finally,\nthis object is converted to JSON format, which allows it to be sent back to the Laravel Backend."}),"\n",(0,n.jsx)(t.h3,{id:"sequence-diagram",children:"Sequence Diagram"}),"\n",(0,n.jsx)(t.p,{children:"The coloring process occurs on the user's device and is called\nwhen a document is loaded or when a user adjusts the color\nof a word."}),"\n",(0,n.jsx)(t.mermaid,{value:"sequenceDiagram\n    participant Laravel Backend\n    participant Coloring Flask\n    participant Coloring Algorithm\n    participant Word Splitter\n\n    activate Laravel Backend\n    activate Coloring Flask\n    \n    Laravel Backend->>Coloring Flask: colored document request\n\n    Coloring Flask->>Coloring Algorithm: colore profile & document text\n    activate Coloring Algorithm\n    Coloring Algorithm->>Coloring Algorithm: split text by non-word characters\n    Coloring Algorithm->>Word Splitter: tokenized text\n    activate Word Splitter\n    Word Splitter--\x3e>Coloring Algorithm: tokenized text with split compound words\n    deactivate Word Splitter\n    \n    Coloring Algorithm->>Coloring Algorithm: get unique words list\n    Coloring Algorithm->>Coloring Algorithm: compare each unique word with exceptions & grapheme-color map\n    \n    Coloring Algorithm--\x3e>Coloring Flask: Colored Document JSON\n    deactivate Coloring Algorithm\n    \n    Coloring Flask--\x3e>Laravel Backend: 'OK' response with Colored Document JSON\n    \n\n    deactivate Laravel Backend\n    deactivate Coloring Flask\n    \n    \n"})]})}function d(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},11151:(e,t,o)=>{o.d(t,{Z:()=>s,a:()=>a});var n=o(67294);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);